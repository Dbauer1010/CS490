import cProfile
import random
import pandas as pd
import timeit
from numpy.random import seed
from numpy.random import shuffle

seed(1)

#the left sibling child position is parent * 2, right sibling child position is parrent * 2 + 1
def GetParentPosition(position):    #get the parent position from child position
    return position // 2


class MinHeap:
    array = []
    count = 0
    def __init__(self):
        self.array.append({
            "value": 0,
            "index": 0,
            "connect": 0
        })

    def HeapPush(self, value, index, connect):  #add a new node to the tree
        self.array.append({
            "value": value,
            "index": index,
            "connect": connect
        })
        self.count += 1
        self.HeapifyUp(self.Size())

    def ExtrudeMin(self):   #take out the root and rebalance the tree
        returnNode = self.GetNode(1)
        lastNode = self.array.pop()
        self.count -= 1
        if self.count > 0:
            self.array[1] = lastNode
        self.HeapifyDown(1)
        return returnNode

    def HeapifyUp(self, position):  #balance the Heap Tree from low to high
        if position <= 1:
            return

        parentPosition = GetParentPosition(position)
        parentNode = self.GetNode(parentPosition)

        leftPosition = parentPosition * 2
        leftNode = self.GetNode(leftPosition)
        rightPosition = parentPosition * 2 + 1
        rightNode = self.GetNode(rightPosition)

        node = 0 #node = 1, means the leftNode is the smallest, and node = 2 means the rightNode is the smallest
        if leftNode is not None and leftNode["value"] < parentNode["value"]:
            node = 1
        if rightNode is not None and ((node == 1 and rightNode["value"] < leftNode["value"]) or (node == 0 and rightNode["value"] < parentNode["value"])):
            node = 2
        if node == 1:
            self.array[leftPosition], self.array[parentPosition] = self.array[parentPosition], self.array[leftPosition]
        elif node == 2:
            self.array[rightPosition], self.array[parentPosition] = self.array[parentPosition], self.array[rightPosition]

        if node != 0:
            self.HeapifyUp(parentPosition)


    def HeapifyDown(self, position):    #balance the tree from high to low
        parentPosition = position
        parentNode = self.GetNode(parentPosition)

        leftPosition = parentPosition * 2
        leftNode = self.GetNode(leftPosition)
        rightPosition = parentPosition * 2 + 1
        rightNode = self.GetNode(rightPosition)

        node = 0  # node = 1, means the leftNode is the smallest, and node = 2 means the rightNode is the smallest
        if leftNode is not None and leftNode["value"] < parentNode["value"]:
            node = 1
        if rightNode is not None and ((node == 1 and rightNode["value"] < leftNode["value"]) or (
                node == 0 and rightNode["value"] < parentNode["value"])):
            node = 2

        if node == 1:
            self.array[leftPosition], self.array[parentPosition] = self.array[parentPosition], self.array[leftPosition]
            self.HeapifyDown(leftPosition)
        elif node == 2:
            self.array[rightPosition], self.array[parentPosition] = self.array[parentPosition], self.array[rightPosition]
            self.HeapifyDown(rightPosition)

    def DecreaseValue(self, value, index, connect): #update the value of the node, since it is decreasing the value, only need heapifyup
        pass

    def Size(self):
        return self.count

    def GetNode(self, position):    #when position is not out of array range, return node. Otherwise return None
        if position > self.count:
            return None #python has None as not exist
        else:
            return self.array[position]


def HeapSort(array):
    heap = MinHeap()
    for i in array:
        heap.HeapPush(i, i, i)
    counter = 0
    while heap.Size() > 0:
        array[counter] = heap.ExtrudeMin()["value"]
        counter += 1
    return array


def GenerateArray(size):
    array = []
    for i in range(size):
        array.append(i)
    random.shuffle(array)
    return array


def test():
    arr = GenerateArray(100000)
    arr = HeapSort(arr)
    print(arr)

def Arr(a, b, c):
    dv = [random.randrange(a, b) for i in range(c)]
    shuffle(dv)
    return dv

def swap(a, i, j):
    t = a[i]
    a[i] = a[j]
    a[j] = t

def SelectionS(arr):
    size = len(arr)
    for i in range(size - 1):
        k = i
        for j in range(i, size):
            if arr[k] > arr[j]:
                k = j
        swap(arr, i, k)
    return arr

def InsertionS(arr):
    size = len(arr)
    for i in range(1, size):
        k = i
        v = arr[k]
        while k > 0 and arr[k-1] > v:
            swap(arr, k - 1, k)
            k = k - 1
    return arr

def BubbleS(arr):
    size = len(arr)
    for i in range(size - 1):
        for j in range(0, size - i - 1):
            if(arr[j] > arr[j+1]):
                swap(arr, j, j + 1)
    return arr

test1 = Arr(1,10000, 10000)

def testS():
    SelectionS(test1)

def testI():
    InsertionS(test1)

def testB():
    BubbleS(test1)

test()

print(timeit.Timer(test).timeit(number=10))#23.793 seconds
print(timeit.Timer(testS).timeit(number=10))#28.912 seconds
print(timeit.Timer(testI).timeit(number=10))#0.0113 seconds
print(timeit.Timer(testB).timeit(number=10))#43.962 seconds
